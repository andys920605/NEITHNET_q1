// Code generated by MockGen. DO NOT EDIT.
// Source: q1/service/interface (interfaces: ICommentSvc)

// Package mock is a generated GoMock package.
package mock

import (
	repository "q1/models/repository"
	errs "q1/utils/errs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICommentSvc is a mock of ICommentSvc interface.
type MockICommentSvc struct {
	ctrl     *gomock.Controller
	recorder *MockICommentSvcMockRecorder
}

// MockICommentSvcMockRecorder is the mock recorder for MockICommentSvc.
type MockICommentSvcMockRecorder struct {
	mock *MockICommentSvc
}

// NewMockICommentSvc creates a new mock instance.
func NewMockICommentSvc(ctrl *gomock.Controller) *MockICommentSvc {
	mock := &MockICommentSvc{ctrl: ctrl}
	mock.recorder = &MockICommentSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommentSvc) EXPECT() *MockICommentSvcMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockICommentSvc) CreateComment(arg0 *repository.Comment) (*repository.Comment, *errs.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0)
	ret0, _ := ret[0].(*repository.Comment)
	ret1, _ := ret[1].(*errs.ErrorResponse)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockICommentSvcMockRecorder) CreateComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockICommentSvc)(nil).CreateComment), arg0)
}

// DeleteComment mocks base method.
func (m *MockICommentSvc) DeleteComment(arg0 string) *errs.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0)
	ret0, _ := ret[0].(*errs.ErrorResponse)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockICommentSvcMockRecorder) DeleteComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockICommentSvc)(nil).DeleteComment), arg0)
}

// GetComment mocks base method.
func (m *MockICommentSvc) GetComment(arg0 string) (*repository.Comment, *errs.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0)
	ret0, _ := ret[0].(*repository.Comment)
	ret1, _ := ret[1].(*errs.ErrorResponse)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockICommentSvcMockRecorder) GetComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockICommentSvc)(nil).GetComment), arg0)
}

// UpdateComment mocks base method.
func (m *MockICommentSvc) UpdateComment(arg0 *repository.Comment) (*repository.Comment, *errs.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0)
	ret0, _ := ret[0].(*repository.Comment)
	ret1, _ := ret[1].(*errs.ErrorResponse)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockICommentSvcMockRecorder) UpdateComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockICommentSvc)(nil).UpdateComment), arg0)
}
